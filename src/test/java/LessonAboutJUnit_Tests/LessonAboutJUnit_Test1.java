package LessonAboutJUnit_Tests;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import LessonAboutJUnit.LessonAboutJUnit;

/*
 * Тестирование - это достаточно важный процесс разработки, я незнаю как проще написать.
 * Когда мы пишем програму нам не обходимо её проверять, для этого и есть тестирование.
 * Тестирование делится на множество подвидов, но если очень упростить то на такие своеобразные три вида:
 * 1) Модульное/Unit тестирвоание - это тестирование отдельных модулей, грубо говоря методов и классов.
 * Такие тесты легкие в плане что они быстрые и не жрут много памяти, их должно быть много.
 * 2) Системное тестирвоание - это тестирование целого куска приложения, несколько классов или методов. 
 * Так же с помощью них можно тестировать работу с внешним компонентом, напримерп одключение к БД. 
 * Это более тяжелые тесты, они занимают больше и времени и мощности, потому их должно быть меньше чем модульных.
 * 3) UI тесты - это тесты котоыре проверяюит пользовательский интерфейс, ну считай, всю программу, то етсь так как это видит пользователь. 
 * Они должны проверять самое не обходимое, самые очевидные пути пользователя. Они очень тяжолые и их должно быть еще меньше.
 * Разработчик занимается и должен знать именно модульное тестирование.
 * 
 * JUnit 5 - это специальный API для тестирвоания кода, он являеться одним из самых популярных.
 * JUnit 5 это новая версия, она добавляет всякие расширения и возможности, но так же она имеет совместимость с JUnit 4 и JUnit 3.
 * В целом, отличия были бы более конкретные если б мы пользовались раньше хотя бы JUnit 4. 
 * (Но как я понимаю то множество старых тестов сейчас все равно написанны именно на JUnit 4, для этого у JUnit 5 и есть эта обратная совметсимость)
 * 
 * Раньше для того что бы работать с JUnit 4 нужно было подгрузить немного файлов, или условно одну MAVEN зависимость.
 * Но JUnit 5 структурней немного более сложный и нагруженый.
 * Структурно он делиться на несколько модулей:
 * 1) JUnit Jupiter - это модуль который имеет в себе весь набор аннотаций, методов и все такое. И в частности он имеет всякие новые возможности JUnit 5.
 * JUnit Jupiter нужен именно для написания тестов на JUnit 5.
 * В общем это инструментарий для разработчика.
 * 2) JUnit Platform - этот модуль позволяет писать и запускать тесты, он позволяет запускать их на любой платформе и даже в консоле. 
 * Обеспечивает связь с Maven и Gradle.
 * В общем это что бы инструментарий запускался и работал.
 * 3) JUnit Vintage - Этот модуль позвоялет производить обратную совместимость с JUnit 4 и JUnit 3.
 * В общем это что бы старый инструментарий запускался и рабатал.
 * 
 * Для стабильной работы тестов в Maven нужно подключить две зависимости:
 * junit-jupiter-api и junit-jupiter-engine, второе это наш движок.
 * Если мы хотим запускать старые тесты на JUnit 4 и JUnit 3 тогда нужно подключать дополнительно junit-vintage-engine.
 * 
 * А так же для работы с JUnit 5 требуеться минимум Java 8. Потому как JUnit 5 приспособлен под лямды и использует лямбды.
 * 
 */
class LessonAboutJUnit_Test1 {
	@Test
	public void getsumTest() {
		LessonAboutJUnit laj = new LessonAboutJUnit();
		int x = 1;
		int y = 2;
		Assertions.assertEquals(3, laj.getSum(x, y));
	}

}
